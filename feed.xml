<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tjerk.art/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tjerk.art/" rel="alternate" type="text/html" /><updated>2022-04-30T23:08:33+02:00</updated><id>https://tjerk.art/feed.xml</id><title type="html">Tjerk Dijkstra, designs for humans</title><subtitle>Tjerk Dijkstra is a programmer, designer and lecturer based in the north of the Netherlands. He likes to make durable and accessible applications and websites.</subtitle><entry><title type="html">Obsidian is beter dan Notion</title><link href="https://tjerk.art/blog/2022/04/30/obsidian-better-notion.html" rel="alternate" type="text/html" title="Obsidian is beter dan Notion" /><published>2022-04-30T00:00:00+02:00</published><updated>2022-04-30T00:00:00+02:00</updated><id>https://tjerk.art/blog/2022/04/30/obsidian-better-notion</id><content type="html" xml:base="https://tjerk.art/blog/2022/04/30/obsidian-better-notion.html"><![CDATA[<hr />
<p>Notion, het beloofde land van overzichtelijk notities beheren, templates en mooi vormgegeven pagina’s.</p>

<p>Maar het heeft altijd al een paar kanttekeningen gehad.
Betaalde accounts, Login muren, Slechte PDF export, Amerikaanse servers die je data beheren. Het wordt tijd om rond te kijken mensen, zie hier Obsidian.</p>

<ol>
  <li>
    <p><strong>Obsidian verbindt notites echt aan elkaar.</strong>
Je kent het wel, wanneer je met Notion werkt dan verwijs je de ene pagina door naar de andere. Echter met Obsidian is het meer dan een verwijzing, het is een koppeling.
Vervolgens kan je ook echt zien, hoe dingen aan elkaar relateren.</p>
  </li>
  <li>
    <p><strong>Het is jouw tweede brein</strong>
Wanneer je aan Obsidian begint maak je ook een soort extensie van al je kennis. Omdat je dingen aan elkaar relateert wordt het een extentie van je eigen brein! Ik heb mijn kennisbank of BOKS of whatever “Mind Palace genoemd” Je bent je eigen kennis dus aan het rubriceren.</p>
  </li>
  <li>
    <p><strong>Het werkt volledig offline</strong>
In tegenstelling tot Notion, geen accounts, geen login, geen cloudsync, niets is verplicht of nodig. Obsidian werkt met offline markdown bestanden, voor mensen die Markdown niet kennen, het is een soort ultra simpele HTML, voor mensen die HTML niet kennen. Het is een soort Rich Text Format, voor mensen die Richt Text Format niet kennen, het is tekst met opmaak, OK.</p>

    <p>Het heeft net zoals Notion ook <strong>templates</strong> die je leven makkelijker maken.</p>
  </li>
  <li>
    <p><strong>Al je data blijft altijd van jou</strong>
Aangezien er geen servers gemoeid zijn met het opslaan van je werk, blijft alles altijd in eigen beheer. Markdown heeft als voordeel dat het makkelijk om te zetten is naar: PDF, HTML. Dus delen is ook vrij eenvoudig, mocht je willen dan kan ook HTML pagina’s eenvoudig online publiceren.</p>
  </li>
  <li>
    <p><strong>Het is gratis</strong></p>
  </li>
  <li>
    <p><strong>Plug-ins</strong>
Er zijn al een hele bak aan toffe plugins waarmee je dit programma tot je eigen zinnen kan zetten, zoals integraties met grote TODO apps en zelfs voice memo’s!</p>
  </li>
  <li>
    <p><strong>Links gaan twee kanten op oftewel, backlinking</strong>
  Je kan per notitie zien welke notities hieraan gekoppeld zijn.</p>
  </li>
  <li>
    <p><strong>Dit bericht is geschreven in Obsidian</strong>
 Tja, het is lekker nerdy en heeft ook die insteek, het is schaamteloos nerdy en daar hou ik van.</p>
  </li>
</ol>

<hr />]]></content><author><name>Tjerk</name></author><category term="blog" /><summary type="html"><![CDATA[Notion, het beloofde land van overzichtelijk notities beheren, templates en mooi vormgegeven pagina’s.]]></summary></entry><entry><title type="html">What’s my name</title><link href="https://tjerk.art/assignments/2022/04/29/assignment_1.html" rel="alternate" type="text/html" title="What’s my name" /><published>2022-04-29T00:00:00+02:00</published><updated>2022-04-29T00:00:00+02:00</updated><id>https://tjerk.art/assignments/2022/04/29/assignment_1</id><content type="html" xml:base="https://tjerk.art/assignments/2022/04/29/assignment_1.html"><![CDATA[<h1 id="the-next-web--javascript-challenge-1--difficulty-510">The Next Web \ Javascript challenge #1 \ Difficulty: (5/10)</h1>

<hr />
<p>Make the following:</p>

<ol>
  <li>Show all numbers in a HTML page that count from 0 until 100</li>
  <li>If the number in the loop is divisible by 3 show the word: “Next”</li>
  <li>If the number in the loop is divisible by 5 show the word: “Web”</li>
  <li>If the number in the loop is divisible by 3 and by 5 show the word: The Next Web</li>
</ol>

<p>For example.</p>

<p><strong>15</strong> is a number which is divisible by 5 and 3</p>

<p><strong>3</strong> is a number which is divisible by 3</p>

<hr />

<details>
  <summary>Hint 1</summary>

	With Javascript you can select an HTML element, like a DIV and append stuff to it.

	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById

	https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent

</details>

<details>
  <summary>Hint 2 </summary>
		You can loop with FOR statements.
		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for
</details>

<details>
  <summary>Hint 3</summary>
	You can check if a division has a remainder, so you could see if something is divisable or not.

	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder
</details>

<details>
  <summary>Hint 4</summary>
	Google how to make Fizz Buzz challenge.
</details>]]></content><author><name>Tjerk</name></author><category term="assignments" /><summary type="html"><![CDATA[The Next Web \ Javascript challenge #1 \ Difficulty: (5/10)]]></summary></entry><entry><title type="html">Getting started</title><link href="https://tjerk.art/assignments/2022/04/29/assignment_2.html" rel="alternate" type="text/html" title="Getting started" /><published>2022-04-29T00:00:00+02:00</published><updated>2022-04-29T00:00:00+02:00</updated><id>https://tjerk.art/assignments/2022/04/29/assignment_2</id><content type="html" xml:base="https://tjerk.art/assignments/2022/04/29/assignment_2.html"><![CDATA[<hr />
<h1 id="so-you-want-to-learn-how-to-code">So you want to learn how to code?</h1>
<p><strong>Caution, everything you read here is a rough sketch, for now..</strong></p>

<p>Hey there! You decided you wanted to learn how to code! Great decision, fair warning though, learning to code <strong>isn’t</strong> easy. Like all new things, it takes a lot of <strong>hard work and practice</strong>, never forget that.</p>

<p>But you took the first step by trying to read this, great job! Keep in mind the things I am about to tell you aren’t for any specific programming language or development style. So no labels, or prejudice, no front-end or back-end, software or web, you want to do something with code, and this is here to help you understand what you need, most specifics you can find out for yourself, using your preferred search engine and a thirst for knowledge.</p>

<h2 id="mindset">Mindset</h2>
<p>This is something you learn along the way, so if you don’t recognise yourself immediately, don’t worry. Also this piece is heavily opinionated, so feel free to disagree.</p>

<h3 id="think-in-possibilities">Think in possibilities</h3>
<p>As a programmer you are always confronted with a lot of problems, as a defensive mechanism</p>

<h3 id="learn-one-language-well-then-learn-a-second-one">Learn one language well. Then learn a second one.</h3>
<p>If you keep jumping from language to language, you won’t get far. Same goes for choosing frameworks.</p>

<h3 id="problem-solvers">Problem solvers</h3>
<p>There are common strategies to improve your problem-solving skills:</p>

<ul>
  <li>Utilise both focused and diffused mode thinking</li>
  <li>Chunk the knowledge you learn</li>
  <li>Embrace failure and learn from it</li>
  <li>Use metaphors and analogies</li>
</ul>

<p>Some tips on how to avoid procrastination:</p>

<ul>
  <li>Find a friend to learn together with</li>
  <li>Focus on the process, not the end product</li>
  <li>Set regular goals</li>
</ul>

<h1 id="development-principles">Development Principles</h1>
<h2 id="empathise">Empathise</h2>
<h2 id="keep-it-simple-stupid">Keep it simple stupid</h2>
<h2 id="the-openclosed-principle">The Open/Closed Principle</h2>
<p>“Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.” 7
Never change anything at its source.
Avoid the Domino Effect.
Doing so causes visual regressions.
Hard to keep track of the knock-on effects.
Always make changes via extension (i.e. addition).</p>

<p>Possibly the most useful principle for dealing with other peoples’ code.
A safe way to make changes.
Everything gets opted into explicitly.
Prevents changes from happening one-sidedly; the developer has to add the class into the markup as well.</p>

<p>A second layer of safety: changes can’t be actioned from one place alone.
Analogous to rewriting Git history.
Safe way of working with legacy code.</p>

<h2 id="the-separation-of-concerns">The Separation of Concerns</h2>
<p>“[…] It is, that one is willing to study in depth an aspect of one’s subject matter in isolation for the sake of its own consistency […] But nothing is gained—on the contrary! —by tackling these various aspects simultaneously. It is what I sometimes have called ‘the separation of concerns’ […] it does not mean ignoring the other aspects, it is just doing justice to the fact that from this aspect’s point of view, the other is irrelevant. It is being one- and multiple- track minded simultaneously.”</p>

<h2 id="the-single-responsibility-principle">The Single Responsibility Principle</h2>
<p>“[…] the single responsibility principle states that every class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.” 3
Do one thing, one thing only, and one thing well.
Break bigger monoliths down into individual concerns. Easier to reason about.
Provides higher composability.
Break things down into their smallest possible parts. Ensure each part fulfils its responsibility very well. Combine responsibilities to create complex components. Swap out, remove, or add discrete parts.
Helps you Separate your Concerns.
Gives you incredible opportunity and flexibility.</p>

<h2 id="single-source-of-truth">Single Source of Truth</h2>
<p>“[…] the practice of structuring information models and associated schemata such that every data element is stored exactly once.” 2
The more philosophical principle behind DRY. Key data should exist once in a source. Increases confidence.
Prevents anomalies and disparity.
Makes changes simpler. Keeps your code in order.
Dry in source, not in production.
Not about avoiding repetition.
It’s about avoiding repeating yourself. Automation of repetition is fine.
Don’t DRY if it’s repeated coincidentally.
Repetition in compiled code is fine.
Avoid duplicating data in source.
Going too far creates awkward and confusing structures in your code.
Use a preprocessor to store key data in variables. Make use of mixins to generate repetition. Abstract design patterns out into reusable objects. Do not DRY anything that is purely coincidental. Repetition is better than the wrong abstraction.</p>

<h2 id="dont-repeat-yourself">Don’t Repeat Yourself</h2>
<p>“Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.” 1</p>

<p>Every discrete piece of information should exist only once. You shouldn’t need to make the same change several times. Repetition is extra overhead: more to maintain, to go wrong. Increases cognitive overhead.
Continuous to bloat.</p>

<h1 id="ways-to-learn">Ways to learn</h1>

<h2 id="pet-projects">Pet projects</h2>

<h2 id="tutorials-dont-learn-you-shit">Tutorials (Don’t learn you shit)</h2>

<h2 id="the-basics">The Basics</h2>

<h2 id="advanced-stuff">Advanced Stuff</h2>

<h2 id="programmers-and-painters">Programmers and Painters</h2>

<h2 id="tips--tricks">Tips &amp; Tricks</h2>

<h2 id="list-of-fallacies">List of fallacies</h2>
<p>Many beginners fall into the trap of worrying extensively about technical questions: Which resource should I choose? Which language should I pick? Which technology should I use? This approach has a good chance of wasting your time. As long as your choices remain within industry standards, they won’t matter nearly as much as having a strong, overarching learning goal to stay motivated, and coding regularly.</p>

<p>Learning to code is not an easy thing. It takes a lot of time and perseverance. When you want to reach your overarching goal, take it one problem at a time — and just get started! You’ll be making continuous progress, and then it’s all about staying motivated and persevering until the end.</p>

<h2 id="quotes">Quotes</h2>
<p>“There are only two kinds of programming languages: those people always bitch about and those nobody uses.” — Bjarne Stroustrup”</p>

<p>“If you want to build a ship, don’t drum up people to collect wood and don’t assign them tasks and work, but rather teach them to long for the endless immensity of the sea.” — Antoine de Saint-Exupéry</p>

<p>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” — (Martin Fowler)</p>

<h2 id="giant-list-of-terms">Giant list of terms</h2>

<ul>
  <li>Variables</li>
  <li>Arrays</li>
  <li>Loops</li>
  <li>Functional programming</li>
  <li>Statements en conditionals</li>
  <li>Datatypes (String, Boolean)</li>
  <li>Templating</li>
  <li>Client side</li>
  <li>Object Oriented</li>
  <li>Frameworks</li>
  <li>Relations</li>
  <li>Databases and data optimisation</li>
  <li>Dataflow</li>
  <li>Single Responsibility Principle</li>
  <li>Design Patterns (MVC)</li>
  <li>DRY (Don’t Repeat Yourself)</li>
  <li>Server side</li>
  <li>Two Way Databinding</li>
  <li>Defensive programming</li>
  <li>Packages, Bundles, Components, Gems</li>
  <li>Sessions, cookies, requests, responses</li>
  <li>API (REST)</li>
  <li>Test driven development</li>
  <li>Unit testing</li>
  <li>Deployment en performance</li>
  <li>Refactoring</li>
  <li>Web-sockets</li>
  <li>Multithreading</li>
  <li>Security</li>
  <li>Abstraction</li>
</ul>

<h3 id="sources">Sources</h3>

<ol>
  <li>
    <p>https://medium.com/@sebastienphl/a-practical-guide-to-learning-the-basics-of-web-programming-79961f3f3baa</p>
  </li>
  <li>https://timeline.com/women-pioneered-computer-programming-then-men-took-their-industry-over-c2959b822523</li>
  <li>Hunt,A.,&amp;Thomas,D.(2000).Thepragmaticprogrammer:Fromjourneymantomaster. Reading, Mass: Addison-Wesley.</li>
  <li>SingleSourceofTruth.https://en.wikipedia.org/wiki/Single_source_of_truth</li>
  <li>Martin,R.C.,Coplien,J.O.,Wampler,K.,Grenning,J.W.,Schuchert,B.L.,Langr,J., Ottinger, T. R., … Feathers, M. C. (2016). Clean code: A handbook of agile software craftsmanship.</li>
  <li>Freeman,E.,Koronkiewicz,P.,&amp;Kowalczyk,G.(2005).Headfirstdesignpatterns. Gliwice: Wydaw. HELION.</li>
</ol>]]></content><author><name>Tjerk</name></author><category term="assignments" /><summary type="html"><![CDATA[So you want to learn how to code? Caution, everything you read here is a rough sketch, for now..]]></summary></entry><entry><title type="html">Fun with filters</title><link href="https://tjerk.art/assignments/2022/04/29/learn-to-code.html" rel="alternate" type="text/html" title="Fun with filters" /><published>2022-04-29T00:00:00+02:00</published><updated>2022-04-29T00:00:00+02:00</updated><id>https://tjerk.art/assignments/2022/04/29/learn-to-code</id><content type="html" xml:base="https://tjerk.art/assignments/2022/04/29/learn-to-code.html"><![CDATA[<h1 id="the-next-web--javascript-3--difficulty-810">The Next Web \ Javascript #3 \ Difficulty: (8/10)</h1>
<hr />

<ol>
  <li>Create 4 div’s with a title of your favourite: book, movie, game and song</li>
  <li>Add one of these data attributes: book, movie, game, song to each one of these divs</li>
  <li>Create 4 buttons accordingly: book, movie, game, song</li>
  <li>When you press one of these buttons, only the DIVS containing the corresponding data attribute should be visible.</li>
</ol>

<details>
  <summary>Hint 1</summary>

  A data attribute can be anything.

 https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes

</details>

<details>
  <summary>Hint 2</summary>

  You can hide a div with the css rule display:none.

  https://developer.mozilla.org/en-US/docs/Web/API/Element/classList

</details>

<details>
  <summary>Hint 3</summary>

  You can loop through all elements with a specific classname.

</details>

<details>
  <summary>Hint 4</summary>

  You can loop through all elements with a specific class.
  You can check the data attribute when you have a specific element.

</details>

<details>
  <summary>Hint 5 [pseudo code]</summary>

  const items = document.querySelectorAll(".item");
  for (var i = 0; i &lt; items; i++) {
    console.log('item: ', items[i]);
    // check data attribute
    // is this diffrent then the button i clicked?
    // hide...
  }

</details>]]></content><author><name>Tjerk</name></author><category term="assignments" /><summary type="html"><![CDATA[The Next Web \ Javascript #3 \ Difficulty: (8/10)]]></summary></entry><entry><title type="html">Bye Strava</title><link href="https://tjerk.art/blog/2022/04/02/bye-strava.html" rel="alternate" type="text/html" title="Bye Strava" /><published>2022-04-02T00:00:00+02:00</published><updated>2022-04-02T00:00:00+02:00</updated><id>https://tjerk.art/blog/2022/04/02/bye-strava</id><content type="html" xml:base="https://tjerk.art/blog/2022/04/02/bye-strava.html"><![CDATA[<hr />
<h2 id="the-unrecorded-run">The Unrecorded Run</h2>

<p>It’s that time again, I mentally prepare for a run. For me personally, there is always some resistance to starting a run. A run after a while, becomes a ritual: preparation, running, and aftercare.</p>

<p>In the preparation phase the random questions hit me, questions like: “Should I record this run?” That specific question leads to more questions: “Can I go fast?”, “How far am I going to run?”, “How do I feel?” Lately I’ve noticed that posting my runs to Strava kinda stresses me out. Because when my run shows up in that feed, the datapoints that get shared with others are kind of intimidating.</p>

<p>Distance/Time/Pace</p>

<p>Why are these three things important to my followers? They might be important to me, actually I don’t really know if they are important to me at all. I am not an athlete, but still it bugs me if I don’t upload or record my run, it almost feels “lost” if I don’t record my progress.</p>

<p>“At this point, it’s really weird to me that I upload my sports activities to a platform that advertises with pictures of professional athletes wearing fancy sunglasses riding bikes that are just as expensive as my car.”</p>

<h2 id="the-kudo-thing">The Kudo thing</h2>

<p>Small confession: I only look at the feed just after I uploaded my run/ride, this sometimes takes a while, and when I have the app open I browse other people’s runs until its finished.</p>

<p>I hand out kudo’s to almost everyone on my feed. Exercise is hard and getting out there and doing something is always something to be appreciated. When I receive my steady flow of 5 kudo’s per run, it helps.
But I see people recording their afternoon walks, indoor bike training and vacation ski events almost obsessively. Every activity counts.. but towards what exactly?</p>

<h2 id="see-ya">See ya</h2>

<p>And I wish you guys good luck, i’d love to jump on a new platform, one that actually motivates me. But it’s kind of discouraging, there is nothing fun about a new empty platform.</p>

<hr />]]></content><author><name>Tjerk</name></author><category term="blog" /><summary type="html"><![CDATA[The Unrecorded Run]]></summary></entry></feed>